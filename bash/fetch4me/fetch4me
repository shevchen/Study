#!/bin/bash -e

fetch4me_escape() {
  # Every '/' is substituted with '\\'.
  ESCAPED=${1////\\\\}
}

fetch4me_update_queue() {
  temp="$QQEDIR/..queue"
  file="$QQEDIR/.queue"
  case "$1" in
    "-a" )
      cat "$file" > "$temp"
      echo "$2" >> "$temp"
      echo "$3" >> "$temp"
      ;;
    "-r" )
      cat "$file" | tail -n +3 > "$temp"
      ;;
    * )
      echo "$1: no such flag." >&2
      return 1
      ;;
  esac
  mv "$temp" "$file"
  return 0
}

fetch4me_update_status() {
  temp="$QQEDIR/..status"
  file="$QQEDIR/.status"
  queue="$QQEDIR/.queue"
  case "$1" in
    "-a" )
      echo "Current file:" > "$temp"
      echo "$3" >> "$temp"
      echo "Referer:" >> "$temp"
      echo "$2" >> "$temp"
      echo >> "$temp"
      ;;
    "-u" )
      echo "No file being processed." > "$temp"
      echo >> "$temp"
      ;;
    * )
      echo "$1: no such flag." >&2
      return 1
      ;;
  esac
  echo "Queue:" >> "$temp"
  cat "$queue" >> "$temp"
  mv "$temp" "$file"
  return 0
}

fetch4me_update_finished() {
  file="$QQEDIR/.finished"
  newline=`date +%s`" $1 $2"
  echo "$newline" >> "$file"
  return 0
}
      
fetch4me_observe() {
  queuesize=0
  fetched=0
  touch "$QQEDIR"/.queue "$QQEDIR"/.status "$QQEDIR"/.finished
  list=(`cat "$QQEDIR/.queue"`)
  if ((${#list[@]} > 0))
  then
    for ((i = 0; i < ${#list[@]}; i += 2 ))
    do
      ref[$queuesize]=${list[$i]}
      url[$queuesize]=${list[$(($i+1))]}
      let queuesize+=1
    done
  fi
  while true
  do
    read pid < "$QQEDIR/.pid"
    if ((pid != $$))
    then
      exit 0
    fi
    list=(`ls "$QQEDIR" | grep ^query`) || true
    if ((${#list[@]} > 0))
    then
      for file in "$list"
      do
        f="$QQEDIR/$file"
        lines=(`cat "$f"`)
        ref[$queuesize]=${lines[0]}
        url[$queuesize]=${lines[1]}
        fetch4me_update_queue -a "${ref[$queuesize]}" "${url[$queuesize]}"
        fetch4me_update_status -u
        let queuesize+=1
        rm "$f"
      done
    fi
    if (($fetched < $queuesize))
    then
      fetch4me_escape ${ref[$fetched]}
      esc_ref=$ESCAPED
      fetch4me_escape ${url[$fetched]}
      esc_url=$ESCAPED
      save_dir=~/Downloads/fetched4you/"$esc_ref";
      mkdir -p "$save_dir"
      full_path="$save_dir/$esc_url.fetched"
      echo "Downloading ${url[$fetched]}..."
      fetch4me_update_status -a "${ref[$fetched]}" "${url[$fetched]}"
      $GETELEMFUNC -cq -O "$full_path" "${url[$fetched]}"
      if (($? != 0))
      then
        echo "Error while processing ${url[$fetched]}." >&2
      else
        echo "${url[$fetched]} saved successfully."
      fi
      fetch4me_update_queue -r
      fetch4me_update_status -u
      fetch4me_update_finished "${ref[$fetched]}" "${url[$fetched]}"
      let fetched+=1
    fi
  done
}

fetch4me_daemonize() {
  trap '' HUP #INT
  fetch4me_observe
}

fetch4me_load_vars() {
  settings=~/.fetch4merc
  if [ ! -e "$settings" ]
  then
    return 0
  fi
  while read line
  do
    if [ ${line:0:7} == "QQEDIR=" ]
    then
      QQEDIR="${line:7}"
    elif [ "${line:0:12}" == "GETELEMFUNC=" ]
    then
      GETELEMFUNC="${line:12}"
    fi
  done < "$settings"
  return 0
}

fetch4me_create_query() {
  file="$QQEDIR""/query"`date +%N`
  while [ -e "$file" ]
  do
    rand=$RANDOM
    let rand %= 10
    file="$file$rand"
  done
  echo "$1" > "$file"
  echo "$2" >> "$file"
  return 0
}

QQEDIR=~/.fetch4me
GETELEMFUNC=wget

fetch4me_load_vars
referer="no_referer"
urls=0
while getopts w:r: var
do
  case "$var" in
    "w" )
      QQEDIR="$OPTARG"
      ;;
    "r" )
      referer="$OPTARG"
      ;;
  esac
done
shift $((OPTIND - 1))
while (($# > 0))
do
  url[$urls]="$1"
  let urls+=1
  shift
done
if (($urls == 0))
then
  echo "No urls given." >&2
  exit 1
fi
mkdir -p "$QQEDIR"
for u in "$url"
do
  fetch4me_create_query "$referer" "$u"
done
PIDFILE="$QQEDIR/.pid"
touch "$PIDFILE"
read pid < "$PIDFILE" || true
ps -p "$pid" 1> /dev/null 2>&1 && exit 0 || true
echo $$ > "$PIDFILE"
fetch4me_daemonize
