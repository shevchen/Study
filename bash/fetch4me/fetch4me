#!/bin/bash -e

fetch4me_escape() {
  # Every '/' is substituted with '\\'.
  ESCAPED=${1////\\\\}
}

fetch4me_update_queue() {
  temp="$QQEDIR/..queue"
  rm -f "$temp"
  touch "$temp"
  file="$QQEDIR/.queue"
  case "$1" in
    "-a" )
      cat "$file" >> "$temp"
      echo "$2" >> "$temp"
      echo "$3" >> "$temp"
      ;;
    "-r" )
      cat "$file" | tail -n +3 >> "$temp"
      ;;
    * )
      echo "$1: no such flag." >&2
      return 1
      ;;
  esac
  mv "$temp" "$file"
  return 0
}

fetch4me_update_status() {
  temp="$QQEDIR/..status"
  rm -f "$temp"
  touch "$temp"
  file="$QQEDIR/.status"
  queue="$QQEDIR/.queue"
  case "$1" in
    "-a" )
      echo "Current file:" >> "$temp"
      echo "$2" >> "$temp"
      echo "Referer:" >> "$temp"
      echo "$3" >> "$temp"
      echo >> "$temp"
      ;;
    "-u" )
      echo "No file being processed." >> "$temp"
      echo >> "$temp"
      ;;
    * )
      echo "$1: no such flag." >&2
      return 1
      ;;
  esac
  echo "Queue:" >> "$temp"
  cat "$queue" >> "$temp"
  mv "$temp" "$file"
  return 0
}

fetch4me_update_finished() {
  file="$QQEDIR/.finished"
  newline=`date +%s`" $1 $2"
  echo "$newline" >> "$file"
  return 0
}
      
fetch4me_observe() {
  touch "$QQEDIR"/.queue "$QQEDIR"/.status "$QQEDIR"/.finished
  queue_size=0
  fetched=0
  while true
  do
    for f in "$QQEDIR"/query*
    do
      lines=(`cat "$f"`)
      ref[$queuesize]=${lines[0]}
      url[$queuesize]=${lines[1]}
      fetch4me_update_queue -a "${ref[$queuesize]}" "${url[$queuesize]}"
      fetch4me_update_status -u
      let queuesize+=1
      rm "$f"
    done
    if [ $fetched -lt $queuesize ]
    then
      fetch4me_escape ${ref[$fetched]}
      esc_ref=$ESCAPED
      fetch4me_escape ${url[$fetched]}
      esc_url=$ESCAPED
      full_path="~/Downloads/fetched4you/$esc_ref/$esc_url"
      fetch4me_update_status -a "${ref[$fetched]}" "${url[$fetched]}"
      $GETELEMFUNC -O "$full_path" "${url[$FETCHED]}"
      if [ $? -ne 0 ]
      then
        echo "Error while processing ${url[$fetched]}." >&2
      else
        echo "${url[$fetched]} saved successfully."
      fi
      fetch4me_update_status -u
      fetch4me_update_queue -r
      fetch4me_update_finished "${ref[$fetched]}" "${url[$fetched]}"
      let fetched+=1
    fi
  done
}

fetch4me_daemonize() {
  return 0
}

fetch4me_load_vars() {
  settings="~/.fetch4merc"
  if [ ! -e "$settings" ]
  then
    return 0
  fi
  while read line
  do
    if [ ${line:0:7} == "QQEDIR=" ]
    then
      $QQEDIR="${line:7}"
    elif [ "${line:0:12}" == "GETELEMFUNC=" ]
    then
      $GETELEMFUNC="${line:12}"
    fi
  done < "$settings"
  return 0
}

fetch4me_create_query() {
  file="$QQEDIR""/query"`date +%N`
  while [ -e "$file" ]
  do
    rand=$RANDOM
    let rand%=10
    file="$file$rand"
  done
  touch "$file"
  echo "$1" >> "$file"
  echo "$2" >> "$file"
  return 0
}

QQEDIR=~/.fetch4me
GETELEMFUNC=wget

fetch4me_load_vars
referer="no_referer"
urls=0
while (($#))
do
  case "$1" in
    "-w" )
      shift
      if [ $# -eq 0 ]
      then
        echo "Invalid arguments." >&2
        return 1
      fi
      QQEDIR="$1"
      shift
      ;;
    "-r" )
      shift
      if [ $# -eq 0 ]
      then
        echo "Invalid arguments." >&2
        return 1
      fi
      referer="$1"
      shift
      ;;
    * )
      mkdir -p "$QQEDIR"
      while (($#))
      do
        fetch4me_create_query "$referer" "$1"
        shift
      done
      urls=1
      ;;
  esac
done
if [ $urls -eq 0 ]
then
  echo "No urls given." >&2
  exit 1
fi
fetch4me_daemonize
fetch4me_observe
